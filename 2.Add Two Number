/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 * };
 */
struct ListNode* addTwoNumbers(struct ListNode* l1, struct ListNode* l2) {
    if(l1==NULL||l2==NULL)
        return l1==NULL?l2:l1;
    struct ListNode *temp_1,*temp_2,*head,*end;
    head=(struct ListNode*)malloc(sizeof(struct ListNode));
    end=head;
    temp_1=l1;
    temp_2=l2;
    int i=0;
    int carry=0;
    while(!(temp_1==NULL||temp_2==NULL))
    {
        struct ListNode*node=(struct ListNode*)malloc(sizeof(struct ListNode));
        i=temp_1->val+temp_2->val+carry;
        carry=i/10;
        end->val=i%10;
        if(temp_1->next==NULL&&temp_2->next==NULL&&carry==1)
        {
            end->next=node;
            end=node;
            end->val=1;
            end->next=NULL;
        }
        if(temp_1->next==NULL&&temp_2->next==NULL&&carry==0)
            end->next=NULL;
        else
        {
            end->next=node;
            end=node;
        }
        temp_1=temp_1->next;
        temp_2=temp_2->next;
    }
    while(temp_1!=NULL)
    {
        struct ListNode*node=(struct ListNode*)malloc(sizeof(struct ListNode));
        i=temp_1->val+carry;
        end->val=i%10;
        carry=i/10;
        if(temp_1->next==NULL&&carry==0)
            end->next=NULL;
        else if(temp_1->next==NULL&&carry==1)
        {
            end->next=node;
            end=node;
            end->val=1;
            end->next=NULL;
        }
        else
        {
            end->next=node;
            end=node;
        }
        temp_1=temp_1->next;
    }
    while(temp_2!=NULL)
    {
        struct ListNode*node=(struct ListNode*)malloc(sizeof(struct ListNode));
        i=temp_2->val+carry;
        end->val=i%10;
        carry=i/10;
        if(temp_2->next==NULL&&carry==0)
            end->next=NULL;
        else if(temp_2->next==NULL&&carry==1)
        {
            end->next=node;
            end=node;
            end->val=1;
            end->next=NULL;
        }
        else
        {
            end->next=node;
            end=node;
        }
        temp_2=temp_2->next;
    }
    end->next=NULL;
    return head;
}
